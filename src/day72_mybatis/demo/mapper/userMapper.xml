<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- 
mapper代理开发：
	mapper接口的完整类名			==			mapper.xml的namespace
	mapper接口中的方法名			==			mapper.xml中的statement的id
	mapper接口中的方法的参数类型	==			对于id的mapper.xml中的statement的parameterType
	mapper接口中的返回值类型		==			对于id的mapper.xml中的statement的resultType
	
mapper接口返回单个和集合类型
	不管查询记录是单条还是多条，在 statement中resultType定义一致，都是单条记录映射的pojo类型。
	mapper接口方法返回值，如果是返回的单个对象，返回值类型是pojo类型，生成的代理对象内部通
	过selectOne获取记录，如果返回值类型是集合对象，生成的代理对象内部通过selectList获取记录。

输入和输出映射
	parameterType
		可以定义pojo包装类型扩展mapper接口输入参数的内容
	resultType
		指定输出结果的类型（pojo，基本类型，hashmap）将sql查询结果映射为java对象
		如果查询结果为一条记录且一列，再使用简单类型
		sql查询的列名要和实体类的属性名相同，相同的属性可以映射成功
	resultMap
		将sql查询结果映射为java对象
		如果sql查询的列名和实体类的属性名不相同，可以使用resultMap将列名和实体的属性名做一个对应关系
		
-->
<mapper namespace="day72_mybatis.demo.mapper.UserMapper">
	<!-- 定义resultMap -->
	<!-- 
		id:唯一标识这个resultMap
		type：最终映射出来的实体类
	 -->
	<resultMap id="resultMap1" type="user" >
		<!-- id：主键的映射
			column：查询出来的别名
			property：要映射到的type的哪个属性
		-->
		<id column="id_" property="id"/>
		<!-- result：普通列的映射 -->
		<result column="uName" property="username" />
		<result column="gender" property="sex" />
	</resultMap>
	
	<!-- 根据id查询用户信息 -->
	<select id="findUserById" parameterType="int" resultType="day72_mybatis.demo.eneity.User">
		select * from user where id=#{id};
	</select>
	
	<!-- 根据用户模糊姓名，查询用户信息 -->
	<!-- user是在sqlMapConfig.xml中定义的别名 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="user">
		<!-- select * from user where username like #{username} -->
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 自定义查询调节，查询用户信息 -->
	<!-- 利用包装类型传递查询调节 userQueryVo是自动扫描到包装类的别名-->
	<!-- ${userCustom.username}:拿到UserQueryVo里的userCustom的username -->
	<select id="findUserList" parameterType="userQueryVo" resultType="user">
		select * from user where username like '%${userCustom.username}%'
	</select>
	
	<!-- 输出简单类型 -->
	<!-- 自定义查询调节，返回查询记录条数 -->
	<select id="findUserCount" parameterType="userQueryVo" resultType="int">
		select count(1) from user where username like '%${userCustom.username}%'
	</select>
	
	<!-- 查询listmap，测试resultMap -->
	<!-- 如果定义的resultMap就在这当前namespace下，直接写其id便可，如果不在同一个namespace下，需要在resultMap id前加上其namespace. -->
	<select id="findUserListMap" parameterType="userQueryVo" resultMap="resultMap1">
		select id id_,username uName,birthday birthday,sex gender,address from user where username like '%${userCustom.username}%'
	</select>
	
	
	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="day72_mybatis.demo.eneity.User">
		<selectKey keyProperty="id" order="AFTER" resultType="int" >
			select LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	
	<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id=#{id}
	</delete>
	
	<!-- 修改用户 -->
	<update id="updateUser" parameterType="day72_mybatis.demo.eneity.User" >
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
	
	
	
	
</mapper>